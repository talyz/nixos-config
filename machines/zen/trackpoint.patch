diff --git a/drivers/hid/hid-lenovo.c b/drivers/hid/hid-lenovo.c
index 364bc7f11d9d..7c4e9971c2ed 100644
--- a/drivers/hid/hid-lenovo.c
+++ b/drivers/hid/hid-lenovo.c
@@ -146,25 +146,6 @@ static int lenovo_input_mapping_cptkbd(struct hid_device *hdev,
 			(usage->hid & HID_USAGE) == 0x238)
 		return -1;
 
-	/* Map wheel emulation reports: 0xffa1 = USB, 0xff10 = BT */
-	if ((usage->hid & HID_USAGE_PAGE) == 0xff100000 ||
-	    (usage->hid & HID_USAGE_PAGE) == 0xffa10000) {
-		field->flags |= HID_MAIN_ITEM_RELATIVE | HID_MAIN_ITEM_VARIABLE;
-		field->logical_minimum = -127;
-		field->logical_maximum = 127;
-
-		switch (usage->hid & HID_USAGE) {
-		case 0x0000:
-			hid_map_usage(hi, usage, bit, max, EV_REL, REL_HWHEEL);
-			return 1;
-		case 0x0001:
-			hid_map_usage(hi, usage, bit, max, EV_REL, REL_WHEEL);
-			return 1;
-		default:
-			return -1;
-		}
-	}
-
 	return 0;
 }
 
@@ -354,53 +335,6 @@ static int lenovo_raw_event(struct hid_device *hdev,
 	return 0;
 }
 
-static int lenovo_event_cptkbd(struct hid_device *hdev,
-		struct hid_field *field, struct hid_usage *usage, __s32 value)
-{
-	struct lenovo_drvdata_cptkbd *cptkbd_data = hid_get_drvdata(hdev);
-
-	/* "wheel" scroll events */
-	if (usage->type == EV_REL && (usage->code == REL_WHEEL ||
-			usage->code == REL_HWHEEL)) {
-		/* Scroll events disable middle-click event */
-		cptkbd_data->middlebutton_state = 2;
-		return 0;
-	}
-
-	/* Middle click events */
-	if (usage->type == EV_KEY && usage->code == BTN_MIDDLE) {
-		if (value == 1) {
-			cptkbd_data->middlebutton_state = 1;
-		} else if (value == 0) {
-			if (cptkbd_data->middlebutton_state == 1) {
-				/* No scrolling inbetween, send middle-click */
-				input_event(field->hidinput->input,
-					EV_KEY, BTN_MIDDLE, 1);
-				input_sync(field->hidinput->input);
-				input_event(field->hidinput->input,
-					EV_KEY, BTN_MIDDLE, 0);
-				input_sync(field->hidinput->input);
-			}
-			cptkbd_data->middlebutton_state = 0;
-		}
-		return 1;
-	}
-
-	return 0;
-}
-
-static int lenovo_event(struct hid_device *hdev, struct hid_field *field,
-		struct hid_usage *usage, __s32 value)
-{
-	switch (hdev->product) {
-	case USB_DEVICE_ID_LENOVO_CUSBKBD:
-	case USB_DEVICE_ID_LENOVO_CBTKBD:
-		return lenovo_event_cptkbd(hdev, field, usage, value);
-	default:
-		return 0;
-	}
-}
-
 static int lenovo_features_set_tpkbd(struct hid_device *hdev)
 {
 	struct hid_report *report;
@@ -935,7 +869,6 @@ static struct hid_driver lenovo_driver = {
 	.probe = lenovo_probe,
 	.remove = lenovo_remove,
 	.raw_event = lenovo_raw_event,
-	.event = lenovo_event,
 	.report_fixup = lenovo_report_fixup,
 };
 module_hid_driver(lenovo_driver);
